{
  "name": "Dochelper - Simple chatbot support - AI + RAG + Firecrawl",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "options": {
          "responseMode": "lastNode"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -320,
        1020
      ],
      "id": "a5252ed0-2e63-4b8c-b2c2-c4b119938c8f",
      "name": "When chat message received",
      "webhookId": "84473a69-c9c6-492e-9233-73408c648609"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{  $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a concise and professional coding assistant. Your purpose is to provide clear, accurate, and helpful code tips.\n\n**Core Rules:**\n* **Be Direct:** Focus exclusively on the user's coding question or issue.\n* **Be Polite & Empathetic:** Maintain a respectful and professional tone.\n* **Be Accurate:** All code and explanations must be correct.\n\n**If you know the answer:**\n* Provide a clear and concise explanation.\n* Include relevant code examples with proper formatting (e.g., Markdown code blocks).\n* Structure your response with a simple, step-by-step breakdown if the solution is complex.\n* After providing the solution, politely ask a follow-up question to ensure the user's needs are met, such as, \"Does this resolve your issue, or would you like to explore other options?\"\n\n**If you don't know the answer:**\n* Politely and directly state that you do not have the information. Use a phrase like, \"I'm sorry, but I don't have the specific information you're looking for.\"\n* Do not offer a guess or a potentially incorrect solution.\n* Ask if the user would like to try a different query.\n\n**Never:**\n* Go off-topic or include unrelated information.\n* Engage in small talk.\n* Use emojis unless specifically requested by the user.\n\n**Always end your response with a clear and concise offer of further help.** A good example is: \"Is there anything else I can assist you with regarding your code?\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1140,
        1020
      ],
      "id": "9487b878-1114-4b11-bb66-32c5c30bed12",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "operation": "map",
        "url": "={{ $json['Link '] }}",
        "sitemapOnly": true,
        "requestOptions": {}
      },
      "type": "@mendable/n8n-nodes-firecrawl.firecrawl",
      "typeVersion": 1,
      "position": [
        60,
        -1220
      ],
      "id": "e1213087-4d86-4aa9-ae2c-affd2f535265",
      "name": "Firecrawl",
      "credentials": {
        "firecrawlApi": {
          "id": "eiMU3hctxwCrDwYq",
          "name": "Firecrawl account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.2,
      "position": [
        2100,
        -1180
      ],
      "id": "1c53db66-f79a-4343-a84d-e803bc00551d",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {
          "stripNewLines": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        2020,
        -1000
      ],
      "id": "69a3c558-368f-47c4-bce6-eb2ae402f356",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data.markdown }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2160,
        -960
      ],
      "id": "8513cacc-cdde-492d-933f-8f7a4861000a",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkOverlap": 20,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2260,
        -820
      ],
      "id": "5c021d33-16e1-4d93-9884-c1e2842eb03f",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1240,
        1240
      ],
      "id": "32d44b19-3e41-40d9-9eff-4b7c366ee800",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "faq_bot",
        "toolDescription": "Reponsible to anskwer question about the n8n. Any question about the N8N that tool needs to answer.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 8,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.2,
      "position": [
        1420,
        1220
      ],
      "id": "e3c81321-390f-4ba7-af44-7e6451916986",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1400,
        1440
      ],
      "id": "3b9fe968-db02-498a-9c34-ae02b15d68be",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {
          "maxTokens": 1000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1100,
        1240
      ],
      "id": "f4a35a1e-6fb7-4f37-9790-72b092a313f4",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "operation": "scrape",
        "url": "={{ $('Set link').item.json.link }}",
        "scrapeOptions": {
          "options": {
            "headers": {}
          }
        },
        "requestOptions": {}
      },
      "type": "@mendable/n8n-nodes-firecrawl.firecrawl",
      "typeVersion": 1,
      "position": [
        1660,
        -1180
      ],
      "id": "90b0b296-80e1-4dfc-9ec2-0b93f08cb984",
      "name": "Firecrawl2",
      "credentials": {
        "firecrawlApi": {
          "id": "eiMU3hctxwCrDwYq",
          "name": "Firecrawl account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        900,
        -1220
      ],
      "id": "399a381e-73cf-4eb5-bf37-ce1fc30c539e",
      "name": "Loop Over Items1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "links",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        280,
        -1220
      ],
      "id": "10d44379-438c-4b81-8fc7-15f1f82ff2bc",
      "name": "Split Out"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3afc4415-e071-4c26-b9ea-2aaf53b05e42",
              "name": "link",
              "value": "={{ $json.links }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1240,
        -1200
      ],
      "id": "0094be10-8843-4941-8342-08337d6a46c3",
      "name": "Set link"
    },
    {
      "parameters": {
        "operationMode": "nodeInputBinary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainSummarization",
      "typeVersion": 2.1,
      "position": [
        -20,
        -880
      ],
      "id": "952dcefd-4ad8-4eb4-acfa-e972974bcc15",
      "name": "Summarization Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini-2025-04-14",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini-2025-04-14"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        60,
        -660
      ],
      "id": "0d94130b-e0aa-40ff-b200-122c0e5128e6",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.2,
      "position": [
        740,
        -880
      ],
      "id": "6628ff95-fdfc-43e9-b4bc-99b556e7c66c",
      "name": "Supabase Vector Store2",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "stripNewLines": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        660,
        -700
      ],
      "id": "59013e06-7063-4b91-9565-8fdce89e3420",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.output.text }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        800,
        -660
      ],
      "id": "c4389757-b2a1-404e-971f-d43a36e86e81",
      "name": "Default Data Loader1"
    },
    {
      "parameters": {
        "chunkOverlap": 20,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        900,
        -520
      ],
      "id": "ee22206a-6c9d-4de6-aba7-0ed18ce4e5f3",
      "name": "Recursive Character Text Splitter1"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.2,
      "position": [
        740,
        -200
      ],
      "id": "4691a6aa-4dd1-4210-a4f0-bf139a46062b",
      "name": "Supabase Vector Store3",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "stripNewLines": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        580,
        -20
      ],
      "id": "63e8d61e-0b0f-464f-9c94-c278a7bdf9fd",
      "name": "Embeddings OpenAI3",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data.markdown || $json.data.data[0].markdown }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        800,
        20
      ],
      "id": "dcac95ac-811c-43d3-995a-fb45b64ae11e",
      "name": "Default Data Loader2"
    },
    {
      "parameters": {
        "chunkOverlap": 20,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        900,
        160
      ],
      "id": "9945538a-b3a7-4d10-9e82-d4da51d7a277",
      "name": "Recursive Character Text Splitter2"
    },
    {
      "parameters": {
        "formTitle": "Upload documents",
        "formDescription": "The form is focus to upload documents and save knowledge base.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Link",
              "placeholder": "https://instagram.com.br",
              "requiredField": true
            }
          ]
        },
        "options": {
          "appendAttribution": false,
          "respondWithOptions": {
            "values": {
              "formSubmittedText": "Info will be processed and save on database"
            }
          }
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -340,
        -220
      ],
      "id": "e63be852-8710-49c6-988f-026c62cc331a",
      "name": "Form link",
      "webhookId": "9f8a5f09-55e1-412a-80f7-ea04a8b1248e"
    },
    {
      "parameters": {
        "operation": "scrape",
        "url": "={{ $json.Link }}",
        "scrapeOptions": {
          "options": {
            "onlyMainContent": false,
            "headers": {}
          }
        },
        "requestOptions": {}
      },
      "type": "@mendable/n8n-nodes-firecrawl.firecrawl",
      "typeVersion": 1,
      "position": [
        -60,
        -220
      ],
      "id": "4e27b77a-d69a-43f9-b85c-fb8abcbe7102",
      "name": "Firecrawl3",
      "credentials": {
        "firecrawlApi": {
          "id": "eiMU3hctxwCrDwYq",
          "name": "Firecrawl account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.2,
      "position": [
        760,
        360
      ],
      "id": "9020825e-7632-43c9-bfae-ebd30c809647",
      "name": "Supabase Vector Store4",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "stripNewLines": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        600,
        540
      ],
      "id": "92eb57de-196d-4bff-8eb8-a89750c3f5a3",
      "name": "Embeddings OpenAI4",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.Description }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        820,
        580
      ],
      "id": "f8e2b013-db7e-4f6b-8fbf-118c21d1e6d1",
      "name": "Default Data Loader3"
    },
    {
      "parameters": {
        "chunkOverlap": 20,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        920,
        720
      ],
      "id": "2fef63f2-4e89-4b8d-89fc-1134b97cae91",
      "name": "Recursive Character Text Splitter3"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2400,
        -1420
      ],
      "id": "49a69b20-7be4-4271-80d1-4207b2c43b02",
      "name": "Wait1",
      "webhookId": "069e4ad6-d067-47f1-b284-d841251d24ba"
    },
    {
      "parameters": {
        "content": "## Setup Supabase vector db\n- Access Supabase account\n- Create table messages_without_answer\n```sql\ncreate table public.messages_without_answer (\n  id bigint generated by default as identity not null,\n  created_at timestamp with time zone not null default now(),\n  message text null,\n  constraint messages_without_answer_pkey primary key (id)\n) TABLESPACE pg_default;\n```\n- Execute sql to create index on database:\n```sql\n-- SET maintenance_work_mem TO '64MB';\n-- CREATE INDEX ON documents USING ivfflat(embedding vector_l2_ops) WITH (lists = 100);\n\n```\n- Execute sql below on sql editor:\n```sql\ncreate extension vector;\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;\n```",
        "height": 740,
        "width": 660
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1180,
        -1540
      ],
      "id": "74c1a888-d13a-44fb-b053-f71fb9656083",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## How add chatbot on Website\n- Click on chat trigger to get 'Chat url'\n- Add the code below on your website:\n```html\n<script type=\"module\">\n        import { createChat } from 'https://cdn.jsdelivr.net/npm/@n8n/chat/dist/chat.bundle.es.js';\n\n        createChat({\n            webhookUrl: \"chat_url_value_here\"\n        });\n    </script>   \n```",
        "height": 320,
        "width": 620
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1860,
        -1540
      ],
      "id": "4098d9f2-38ca-43f9-9c42-273028598c5a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Services required\n- Supabase(Rag)\n- Firecrawl(https://www.firecrawl.dev/)\n- Open AI\n"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -460,
        -1540
      ],
      "id": "e74e5a5d-36fd-4e0d-85ed-d37026ec186c",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Map website link to generate the RAG e save on database\n",
        "height": 300,
        "width": 3000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -440,
        -1340
      ],
      "id": "f0d919c2-c3d9-42f3-8a36-468b8be4b9d1",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Generate RAG from PDF e save on database\n",
        "height": 580,
        "width": 3000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -440,
        -960
      ],
      "id": "1e690ed1-4e13-409e-affa-c792900223e4",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "formTitle": "Upload documents",
        "formDescription": "The form is focus to upload documents and save knowledge base.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Document(PDF)",
              "fieldType": "file",
              "acceptFileTypes": "pdf",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -340,
        -900
      ],
      "id": "5f1fc5ed-d3ea-4ee5-a1e5-99c33d286e68",
      "name": "Upload PDF",
      "webhookId": "78c97682-7657-4405-a3ae-e1a2542d3b09"
    },
    {
      "parameters": {
        "content": "## Generate RAG from link e save on database\n",
        "height": 580,
        "width": 3000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -460,
        -300
      ],
      "id": "ebafbf4d-4de5-4a9e-ad2b-513b8787eeb3",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "formTitle": "Upload documents",
        "formDescription": "The form is focus to upload documents and save knowledge base.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Description",
              "fieldType": "textarea",
              "placeholder": "Info here to add",
              "requiredField": true
            }
          ]
        },
        "options": {
          "appendAttribution": false,
          "respondWithOptions": {
            "values": {
              "formSubmittedText": "Info will be processed and save on database"
            }
          }
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -200,
        480
      ],
      "id": "315eab5c-4762-48bc-803c-fce3416fff31",
      "name": "Form TEXT",
      "webhookId": "a784e6be-ce3a-41f2-8089-2a18428d1f8f"
    },
    {
      "parameters": {
        "content": "## Generate RAG from text e save on database\n",
        "height": 580,
        "width": 3000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -440,
        300
      ],
      "id": "42178d17-07e8-4c3d-9008-1dd421464e3b",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Chatbot consume data from database and return a answer to the end user\n",
        "height": 760,
        "width": 3000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -500,
        920
      ],
      "id": "4aadd715-ed52-49fd-bb2d-e60e70716136",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Listen for incoming events').item.json.message.text }}",
        "options": {
          "systemMessage": "=You are a concise and professional coding assistant. Your purpose is to provide clear, accurate, and helpful code tips.\n\n**Core Rules:**\n* **Be Direct:** Focus exclusively on the user's coding question or issue.\n* **Be Polite & Empathetic:** Maintain a respectful and professional tone.\n* **Be Accurate:** All code and explanations must be correct.\n\n**If you know the answer:**\n* Provide a clear and concise explanation.\n* Include relevant code examples with proper formatting (e.g., Markdown code blocks).\n* Structure your response with a simple, step-by-step breakdown if the solution is complex.\n* After providing the solution, politely ask a follow-up question to ensure the user's needs are met, such as, \"Does this resolve your issue, or would you like to explore other options?\"\n\n**If you don't know the answer:**\n* Politely and directly state that you do not have the information. Use a phrase like, \"I'm sorry, but I don't have the specific information you're looking for.\"\n* Do not offer a guess or a potentially incorrect solution.\n* Ask if the user would like to try a different query.\n\n**Never:**\n* Go off-topic or include unrelated information.\n* Engage in small talk.\n* Use emojis unless specifically requested by the user.\n\n**Always end your response with a clear and concise offer of further help.** A good example is: \"Is there anything else I can assist you with regarding your code?\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        960,
        1840
      ],
      "id": "fb595ac9-3d97-4d8d-8863-fe8b4d8c8afa",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=\"{{ $('Listen for incoming events').item.json.message.from.id }}\""
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1040,
        2220
      ],
      "id": "64ee179d-d94b-4398-9f2b-cb20280ace0c",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "faq_bot",
        "toolDescription": "Reponsible to anskwer question about the n8n. Any question about the N8N that tool needs to answer.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 8,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.2,
      "position": [
        1240,
        2040
      ],
      "id": "189cc7df-6697-41a4-848d-21dc7974f888",
      "name": "Supabase Vector Store5",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1220,
        2260
      ],
      "id": "390bdf39-ec32-4d26-a832-ca4797730667",
      "name": "Embeddings OpenAI5",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        860,
        2060
      ],
      "id": "c36b2294-f111-470b-bdf7-f20ca38d14de",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "5bec074f-ad76-4142-892b-12f579664c6f",
      "name": "Listen for incoming events",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -300,
        1840
      ],
      "webhookId": "f1e34369-4e22-4659-9cfa-b837d5f8e65f",
      "typeVersion": 1,
      "credentials": {
        "telegramApi": {
          "id": "rxtXyqgKT9iBGLxT",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "text",
              "stringValue": "={{ $('Listen for incoming events').item.json.message.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f40bbb92-5383-4d85-b054-2e9c4bfc9b14",
      "name": "Voice or Text1",
      "type": "n8n-nodes-base.set",
      "position": [
        20,
        1840
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "chatId": "={{ $('Voice or Text1').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1320,
        1840
      ],
      "id": "f9eea33e-45e8-4597-98b6-f202deb1ca85",
      "name": "Telegram",
      "webhookId": "c11a142f-e13c-473a-a58b-38316f22feba",
      "credentials": {
        "telegramApi": {
          "id": "rxtXyqgKT9iBGLxT",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "content": "## Telegram chatbot consume data from database and return a answer to the end user\n",
        "height": 760,
        "width": 3000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -480,
        1740
      ],
      "id": "d98f60aa-df3c-4bad-b1bd-83c65ca48fbd",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "formTitle": "Upload documents",
        "formDescription": "The form is focus to upload documents and save knowledge base.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Link ",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -380,
        -1220
      ],
      "id": "f9f3950b-ee1f-49ea-baad-11c7dd21d28d",
      "name": "Form to map links",
      "webhookId": "f1f8aadd-bfd3-4e79-bd7c-c6e68fad3faf"
    },
    {
      "parameters": {
        "jsCode": "return { embedded: $input.first().json.data[0].embedding }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        1020
      ],
      "id": "ab4c5188-bbe3-4458-865a-1048b074636f",
      "name": "Code"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        2180,
        4440
      ],
      "id": "05ffe725-b4ef-4f4a-a387-9e0d4357a630",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "path": "messages-without-answer",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        800,
        4440
      ],
      "id": "e04124c6-cd98-4d8a-84f2-cbe9a58586ec",
      "name": "Webhook",
      "webhookId": "de4f019e-85fa-4ea6-b394-dbdcd544bb89"
    },
    {
      "parameters": {
        "path": "remove-message",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -320,
        4460
      ],
      "id": "bbfe8545-61f9-47f4-982f-3b00888cb164",
      "name": "Webhook1",
      "webhookId": "992b78c2-3919-4960-8fd3-91682bf0effc"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $json.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -100,
        1020
      ],
      "id": "44cc793d-0458-4a83-aa6c-59cf7e0c8013",
      "name": "Embedding the question",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, content, embedding <=> '[{{ $json.embedded }}]'::vector AS distance\nFROM documents where\n  embedding <=> '[{{ $json.embedded }}]'::vector < 0.5\nORDER BY distance\nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        100,
        1240
      ],
      "id": "c59f5e33-be0f-4d0f-8e9d-c5a7c6998c08",
      "name": "Check has answer on db",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fEhuvm5Tafd41W7w",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "messages_without_answer",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "message",
              "fieldValue": "={{ $('When chat message received').item.json.chatInput }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        540,
        1340
      ],
      "id": "66442a52-5993-4990-baf2-a9422d5fba50",
      "name": "Save question without answer",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "25672c9f-6d8b-493a-b724-14eacde3ca2a",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        320,
        1240
      ],
      "id": "a570f7a0-bd35-4169-899f-538902619979",
      "name": "Verification"
    },
    {
      "parameters": {
        "content": "## Remove message without answer Workflow\n- Create a separated Workforce\n- Activate the Workflow",
        "height": 420,
        "width": 940
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -520,
        4340
      ],
      "id": "e19deadf-4635-4c88-b5ce-5a1e7c4fb8be",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## Generate html page list message without answer\n- Create a separeted Workflow\n- Activa the workflow\n- Click on Webhook to copy the link",
        "height": 500,
        "width": 2240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        540,
        4260
      ],
      "id": "358378cb-c5ab-4690-9c4a-c2b834473ebe",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "messages_without_answer",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1140,
        4420
      ],
      "id": "94f972fb-63d5-431a-9e3b-b311d5f10150",
      "name": "Get messages without answer",
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get all items from the previous node named 'PreviousNodeName'\nconst items = $('Get messages without answer').all();\n\nreturn { \"json\": { items: items } }\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1460,
        4420
      ],
      "id": "fbd48378-a750-4c79-b6d9-60fdee851dc2",
      "name": "Get list of results"
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>My HTML document</title>\n</head>\n<body>\n  <table border=\"1\" cellpadding=\"5\">\n            <tr><th>ID</th><th>Message</th><th>Actions</th></tr>\n            {{ $json.items.map(row => `\n              <tr>\n                <td>${row.json.id}</td>\n                <td>${row.json.message}</td>\n                <td>\n                  <form action=\"/webhook/remove-message\" method=\"GET\">\n                    <input type=\"hidden\" name=\"id\" value=\"${row.json.id}\" />\n                    <button type=\"submit\">Delete</button>\n                  </form>\n                </td>\n              </tr>\n            `).join('')}}\n          </table>\n</body>\n</html>\n\n<style>\n.container {\n  background-color: #ffffff;\n  text-align: center;\n  padding: 16px;\n  border-radius: 8px;\n}\n\nh1 {\n  color: #ff6d5a;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 8px;\n}\n\nh2 {\n  color: #909399;\n  font-size: 18px;\n  font-weight: bold;\n  padding: 8px;\n}\n</style>\n\n<script>\nconsole.log(\"Hello World!\");\n</script>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        1820,
        4420
      ],
      "id": "3228b28a-983d-4114-853b-2da0ac5b0216",
      "name": "HTML page"
    },
    {
      "parameters": {
        "jsCode": "return { embedded: $input.first().json.data[0].embedding }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        2060
      ],
      "id": "bf6d73bd-ac6b-4e1a-a0a7-5702f09ad92f",
      "name": "Code1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $json.message.text || $json.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        40,
        2060
      ],
      "id": "3cb58bdc-113a-4688-a877-83488fd458cb",
      "name": "Embedding the question1",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, content, embedding <=> '[{{ $json.embedded }}]'::vector AS distance\nFROM documents where\n  embedding <=> '[{{ $json.embedded }}]'::vector < 0.5\nORDER BY distance\nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        240,
        2280
      ],
      "id": "edd8de51-6ee2-4922-9f85-1ad22f30e6ad",
      "name": "Check has answer on db1",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fEhuvm5Tafd41W7w",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "messages_without_answer",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "message",
              "fieldValue": "={{ $('Voice or Text1').item.json.message.text || $json.chatInput }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        680,
        2380
      ],
      "id": "a9010237-cc6a-444e-b77b-f7900892fe3b",
      "name": "Save question without answer1",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "25672c9f-6d8b-493a-b724-14eacde3ca2a",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        460,
        2280
      ],
      "id": "acbdf2aa-f046-496c-b09a-e7518fabce21",
      "name": "Verification1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Voice or Text1').item.json.message.from.id }}",
        "text": "=I can help with that, Is there anything else I can assist you?",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        920,
        2380
      ],
      "id": "e5ec9963-a46e-4a68-933a-6647d4568a0f",
      "name": "Telegram1",
      "webhookId": "c11a142f-e13c-473a-a58b-38316f22feba",
      "credentials": {
        "telegramApi": {
          "id": "rxtXyqgKT9iBGLxT",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{  $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=Return message \"I can not help with that, Is there anything else I can assist you?\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        780,
        1340
      ],
      "id": "18d2a8c1-260c-4a45-89d6-178144b20c1d",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}",
        "contextWindowLength": 1
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        900,
        1540
      ],
      "id": "eb85885d-b6fd-4a07-a8df-c75330b30a68",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {
          "maxTokens": 1000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        760,
        1540
      ],
      "id": "92026026-4486-49cf-a96a-2821749c994e",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "messages_without_answer",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.query.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -60,
        4460
      ],
      "id": "237e7e3d-9363-48d5-b9ad-19da19797ecb",
      "name": "Remove by id",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a50be2c-3965-4dc5-a9e0-9284bf4547f4",
              "leftValue": "={{ $json.body.isGroup }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        260,
        3120
      ],
      "id": "12c9a5a3-334c-44a9-b7da-5f79f6125736",
      "name": "Verifying is not group"
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "text",
              "stringValue": "={{ $('Webhook2').item.json.body.text.message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ca30844f-958f-40a6-b00b-fea6d6a75307",
      "name": "Text received",
      "type": "n8n-nodes-base.set",
      "position": [
        840,
        2940
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.z-api.io/instances/{{ $('Instance Id e token').item.json.instance_id }}/token/{{ $('Instance Id e token').item.json.token }}/send-text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook2').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "I can't help with that, Is there anything else I can assist you?"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1720,
        3500
      ],
      "id": "8e107d76-5e38-41c1-b2b8-d8169488a41f",
      "name": "HTTP Request",
      "credentials": {
        "httpCustomAuth": {
          "id": "6VofUG0VC8A6MIMK",
          "name": "Z-Api"
        },
        "httpHeaderAuth": {
          "id": "9HwPZJMGhkfsifFV",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.z-api.io/instances/{{ $('Instance Id e token').item.json.instance_id }}/token/{{ $('Instance Id e token').item.json.token }}/send-text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook2').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2240,
        2940
      ],
      "id": "a71861d0-2fc4-4e74-8146-092767e3e824",
      "name": "HTTP Request1",
      "credentials": {
        "httpCustomAuth": {
          "id": "6VofUG0VC8A6MIMK",
          "name": "Z-Api"
        },
        "httpHeaderAuth": {
          "id": "9HwPZJMGhkfsifFV",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f7805f5e-a130-44d4-8030-a5412a27f550",
              "name": "instance_id",
              "value": "3E6D747154FDD14AC1AB3E93C353D08B",
              "type": "string"
            },
            {
              "id": "f61180bb-6b56-4daf-850a-ae2d6f51825a",
              "name": "token",
              "value": "EE6289747BCFDE1F0A70D82F",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        3000
      ],
      "id": "677cc4aa-778f-431d-b1fc-a6ef6afff7ee",
      "name": "Instance Id e token"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ef5688af-ae71-4719-b167-6b4b81d44a96",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        40,
        3120
      ],
      "id": "edf97bce-5d66-4cc4-8900-58d7091c7fcc",
      "name": "Webhook2",
      "webhookId": "ef5688af-ae71-4719-b167-6b4b81d44a96"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook2').item.json.body.text.message }}",
        "options": {
          "systemMessage": "=You are a concise and professional coding assistant. Your purpose is to provide clear, accurate, and helpful code tips.\n\n**Core Rules:**\n* **Be Direct:** Focus exclusively on the user's coding question or issue.\n* **Be Polite & Empathetic:** Maintain a respectful and professional tone.\n* **Be Accurate:** All code and explanations must be correct.\n\n**If you know the answer:**\n* Provide a clear and concise explanation.\n* Include relevant code examples with proper formatting (e.g., Markdown code blocks).\n* Structure your response with a simple, step-by-step breakdown if the solution is complex.\n* After providing the solution, politely ask a follow-up question to ensure the user's needs are met, such as, \"Does this resolve your issue, or would you like to explore other options?\"\n\n**If you don't know the answer:**\n* Politely and directly state that you do not have the information. Use a phrase like, \"I'm sorry, but I don't have the specific information you're looking for.\"\n* Do not offer a guess or a potentially incorrect solution.\n* Ask if the user would like to try a different query.\n\n**Never:**\n* Go off-topic or include unrelated information.\n* Engage in small talk.\n* Use emojis unless specifically requested by the user.\n\n**Always end your response with a clear and concise offer of further help.** A good example is: \"Is there anything else I can assist you with regarding your code?\"\n\nReturn the text of response in a format where can be good visualize on Whatsapp"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1780,
        2940
      ],
      "id": "c52089b1-4255-4a34-a7e7-2c0a88d4d60e",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=\"{{ $('Webhook2').item.json.body.phone }}\""
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1860,
        3340
      ],
      "id": "e701550a-9e89-468a-8baf-07769c0e50c1",
      "name": "Simple Memory3"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "faq_bot",
        "toolDescription": "Reponsible to anskwer question about the n8n. Any question about the N8N that tool needs to answer.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 8,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.2,
      "position": [
        2060,
        3160
      ],
      "id": "b0bc94ea-95ae-47e3-ae7e-4c94efdf6f3d",
      "name": "Supabase Vector Store6",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        2040,
        3380
      ],
      "id": "1c7cee9c-446b-4f3b-bcd2-ad83eb09f130",
      "name": "Embeddings OpenAI6",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1680,
        3180
      ],
      "id": "042700bd-48a1-4b78-954a-d354c8b7944a",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return { embedded: $input.first().json.data[0].embedding }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        3180
      ],
      "id": "5caf2889-0f17-43f6-a506-e1090291dde3",
      "name": "Code2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $('Webhook2').item.json.body.text.message }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        860,
        3180
      ],
      "id": "33ff0f7a-465f-4e24-b9f0-df0bda51fb53",
      "name": "Embedding the question2",
      "credentials": {
        "openAiApi": {
          "id": "bWKIDas8pN9YKmLh",
          "name": "Tiago - english language tutor"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, content, embedding <=> '[{{ $json.embedded }}]'::vector AS distance\nFROM documents where\n  embedding <=> '[{{ $json.embedded }}]'::vector < 0.5\nORDER BY distance\nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1100,
        3400
      ],
      "id": "cfc7acca-ec87-4cab-8672-50d5b87ceb87",
      "name": "Check has answer on db2",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fEhuvm5Tafd41W7w",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "messages_without_answer",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "message",
              "fieldValue": "={{ $('Text received').item.json.message.text || $json.chatInput }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1500,
        3500
      ],
      "id": "d1c051f1-8b31-4f79-a93e-c57d7e88354f",
      "name": "Save question without answer2",
      "credentials": {
        "supabaseApi": {
          "id": "SoEeWvpXYIeudr8A",
          "name": "Track token usage - dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "25672c9f-6d8b-493a-b724-14eacde3ca2a",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1280,
        3400
      ],
      "id": "f86d17d7-788e-4975-b34c-e1f01729315a",
      "name": "Verification2"
    },
    {
      "parameters": {
        "content": "## Whatsapp -  chatbot consume data from database and return a answer to the end user\n",
        "height": 1300,
        "width": 3000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -480,
        2640
      ],
      "id": "880105b4-27a1-48c6-a05b-ed6d1c92267d",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "## Setup whatsapp\n- Create account on https://z-api.io/\n- Scan the Qrcode\n- Setup the Webhook URL to trigger the Whatsapp workflow.",
        "height": 240,
        "width": 440
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1040,
        2660
      ],
      "id": "0a1d2b6c-f1e5-4692-94a2-fdfeed01b811",
      "name": "Sticky Note12"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Embedding the question",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Firecrawl": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Firecrawl2": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Set link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set link": {
      "main": [
        [
          {
            "node": "Firecrawl2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Summarization Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Summarization Chain": {
      "main": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI3": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader2": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store3",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter2": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader2",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Form link": {
      "main": [
        [
          {
            "node": "Firecrawl3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Firecrawl3": {
      "main": [
        [
          {
            "node": "Supabase Vector Store3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI4": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store4",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader3": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store4",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter3": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader3",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload PDF": {
      "main": [
        [
          {
            "node": "Summarization Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Form TEXT": {
      "main": [
        [
          {
            "node": "Supabase Vector Store4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store5": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI5": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store5",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Listen for incoming events": {
      "main": [
        [
          {
            "node": "Voice or Text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice or Text1": {
      "main": [
        [
          {
            "node": "Embedding the question1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Form to map links": {
      "main": [
        [
          {
            "node": "Firecrawl",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Check has answer on db",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [],
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get messages without answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Remove by id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embedding the question": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check has answer on db": {
      "main": [
        [
          {
            "node": "Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verification": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save question without answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get messages without answer": {
      "main": [
        [
          {
            "node": "Get list of results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get list of results": {
      "main": [
        [
          {
            "node": "HTML page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML page": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Check has answer on db1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embedding the question1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check has answer on db1": {
      "main": [
        [
          {
            "node": "Verification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verification1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save question without answer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save question without answer1": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save question without answer": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Verifying is not group": {
      "main": [
        [
          {
            "node": "Instance Id e token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text received": {
      "main": [
        [
          {
            "node": "Embedding the question2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instance Id e token": {
      "main": [
        [
          {
            "node": "Text received",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "Verifying is not group",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store6": {
      "ai_tool": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI6": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store6",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Check has answer on db2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embedding the question2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check has answer on db2": {
      "main": [
        [
          {
            "node": "Verification2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save question without answer2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verification2": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save question without answer2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f1020fb5-67a4-4b58-8e79-af09847307e3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4e48073067c98941c0e9b86013547195208bc911ff861b585319d831d7845256"
  },
  "id": "uKxksetiP7PX1RbF",
  "tags": []
}